# <script src="https://gist.github.com/Dminor7/62975c3953c180f3fb15274ea19fa691.js"></script>
# credit: https://gist.github.com/Dminor7/62975c3953c180f3fb15274ea19fa691
# my google sheet link(not public, yet): https://docs.google.com/spreadsheets/d/1FkPFO9J4Qlvh2esipckoogLf8EkV4ZI55UENuJQxs_8/edit?usp=sharing

"""
# Worksheet header to data key mapping
header_to_key = {
    "Name":"name",
    "Age":"age",
    "Weight(Kg)":"weight_kg",
}
# List of objects to load into worksheet
data = [
    {
        "name":"Foo",
        "age":18
        "weight_kg":50
    },
    {
        "name":"Bar",
        "age":19
        "weight_kg":51
    }
]
"""
from typing import Any, Optional, Union, List

import gspread as gs

# Writes header to 1st row in the worksheet.
def write_headers(worksheet: gs.Worksheet) -> List:
        headers = list(header_to_key.keys())
        worksheet.insert_row(headers)
        return worksheet.row_values(1)

# Check for headers 
def check_headers(worksheet: gs.Worksheet) -> Union[Any, List]:
    try:
        headers = worksheet.row_values(1)
    except IndexError:
        return []
    else:
        return headers

# Write data into worksheet
def write_to_worksheet(
        sheet: gs.Spreadsheet, worksheet: gs.Worksheet, data: List
    ) -> Any:
    try:
        headers = worksheet.row_values(1)
    except IndexError:
        headers = write_headers(worksheet=worksheet)
    put_values = []
    for v in data:
        temp = []
        for h in headers:
            temp.append(v.get(header_to_key[h]))
        put_values.append(temp)

    return sheet.values_append(
        worksheet.title,
        {"valueInputOption": "USER_ENTERED"},
        {"values": put_values},
    )
    
# Second example code to help work the code to and from google sheets

from __future__ import print_function
import os.path
from googleapiclient.discovery import build
from google_auth_oauthlib.flow import InstalledAppFlow
from google.auth.transport.requests import Request
from google.oauth2.credentials import Credentials

# If modifying these scopes, delete the file token.json.
SCOPES = ['https://www.googleapis.com/auth/spreadsheets']

# The ID and range of a sample spreadsheet.
SAMPLE_SPREADSHEET_ID = 'FILLOUT'
SAMPLE_RANGE_NAME = 'Class Data!A2:E'


def main():
    """Shows basic usage of the Sheets API.
    Prints values from a sample spreadsheet.
    """
    creds = None
    # The file token.json stores the user's access and refresh tokens, and is
    # created automatically when the authorization flow completes for the first
    # time.
    if os.path.exists('token.json'):
        creds = Credentials.from_authorized_user_file('token.json', SCOPES)
    # If there are no (valid) credentials available, let the user log in.
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file(
                'credentials.json', SCOPES)
            creds = flow.run_local_server(port=0)
        # Save the credentials for the next run
        with open('token.json', 'w') as token:
            token.write(creds.to_json())

    service = build('sheets', 'v4', credentials=creds)

    list = [
        [
            'Chris',
            'Male',
            '1. Freshman',
            'FL',
            'Art',
            'Baseball'
        ]
    ]
    resource = {
        "majorDimension": "ROWS",
        "values": list
    }

    # Call the Sheets API
    sheet = service.spreadsheets()
    sheet.values().append(
        spreadsheetId=SAMPLE_SPREADSHEET_ID,
        range=SAMPLE_RANGE_NAME,
        valueInputOption='USER_ENTERED',
        body=resource
    ).execute()

    print("Added a new row to your Google sheet")

main()


